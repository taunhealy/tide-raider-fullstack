"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { format } from "date-fns";
import { Beach } from "@prisma/client";
import { RentalItemType, RENTAL_POLICIES } from "@/app/lib/rentals/constants";
import { calculateRentalCost } from "@/app/lib/rentalUtility";

interface RentalRequestFormProps {
  rentalItemId: string;
  availableBeaches: { id: string; name: string }[];
  itemType: string; // This should match one of the RentalItemType values
}

export function RentalRequestForm({
  rentalItemId,
  availableBeaches,
  itemType,
}: RentalRequestFormProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [startDate, setStartDate] = useState<Date | null>(null);
  const [numberOfWeeks, setNumberOfWeeks] = useState(
    RENTAL_POLICIES.MIN_RENTAL_WEEKS
  );
  const [selectedBeachId, setSelectedBeachId] = useState("");

  // Calculate end date based on start date and number of weeks
  const endDate = startDate
    ? new Date(
        new Date(startDate).setDate(startDate.getDate() + numberOfWeeks * 7 - 1)
      )
    : null;

  // Calculate total cost using our package-based pricing
  const { usdAmount } = calculateRentalCost(
    numberOfWeeks,
    itemType as RentalItemType
  );

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!startDate) {
      setError("Please select a start date");
      return;
    }

    if (!selectedBeachId) {
      setError("Please select a pickup/dropoff location");
      return;
    }

    setLoading(true);
    setError("");

    try {
      const response = await fetch("/api/rental-requests", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          rentalItemId,
          startDate,
          endDate,
          beachId: selectedBeachId,
          totalCost: { zar: usdAmount * 18.5, usd: usdAmount }, // Approximate ZAR conversion
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to create rental request");
      }

      const data = await response.json();
      router.push(`/rentals/requests/${data.id}`);
    } catch (err: unknown) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setLoading(false);
    }
  };

  // Get today's date in YYYY-MM-DD format for min attribute
  const today = new Date().toISOString().split("T")[0];

  // Handle date input change
  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const dateValue = e.target.value;
    if (dateValue) {
      setStartDate(new Date(dateValue));
    } else {
      setStartDate(null);
    }
  };

  // Calculate number of 2-week packages
  const packageCount = Math.ceil(numberOfWeeks / 2);

  return (
    <form onSubmit={handleSubmit} className="space-y-6 font-primary">
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md">
          {error}
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Start Date
        </label>
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-5">
          <div className="mb-4 p-4 bg-blue-50 rounded-lg text-sm text-gray-700">
            <p className="font-medium mb-1">Rental Policy:</p>
            <p>
              Rentals are in 2-week packages (minimum{" "}
              {RENTAL_POLICIES.MIN_RENTAL_WEEKS} week)
            </p>
          </div>

          <input
            type="date"
            min={today}
            value={startDate ? startDate.toISOString().split("T")[0] : ""}
            onChange={handleDateChange}
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent font-primary"
          />

          {startDate && (
            <div className="mt-4 p-3 bg-gray-50 rounded-lg">
              <span className="font-medium">Selected Start Date:</span>{" "}
              <span className="text-gray-600">
                {format(startDate, "MM/dd/yyyy")}
              </span>
            </div>
          )}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Number of Weeks
        </label>
        <div className="flex items-center">
          <button
            type="button"
            onClick={() =>
              numberOfWeeks > RENTAL_POLICIES.MIN_RENTAL_WEEKS &&
              setNumberOfWeeks(numberOfWeeks - 1)
            }
            disabled={numberOfWeeks <= RENTAL_POLICIES.MIN_RENTAL_WEEKS}
            className="px-4 py-2 bg-gray-100 rounded-l-md border border-gray-300 disabled:opacity-50 hover:bg-gray-200 transition-colors"
          >
            -
          </button>
          <span className="px-6 py-2 border-t border-b border-gray-300 font-medium bg-white">
            {numberOfWeeks}
          </span>
          <button
            type="button"
            onClick={() =>
              numberOfWeeks < RENTAL_POLICIES.MAX_RENTAL_WEEKS &&
              setNumberOfWeeks(numberOfWeeks + 1)
            }
            disabled={numberOfWeeks >= RENTAL_POLICIES.MAX_RENTAL_WEEKS}
            className="px-4 py-2 bg-gray-100 rounded-r-md border border-gray-300 disabled:opacity-50 hover:bg-gray-200 transition-colors"
          >
            +
          </button>
        </div>

        {startDate && endDate && (
          <div className="mt-3 p-3 bg-gray-50 rounded-lg text-sm">
            <span className="font-medium">End Date:</span>{" "}
            {format(endDate, "MM/dd/yyyy")}
          </div>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Pickup/Dropoff Location
        </label>
        <select
          className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary focus:ring-primary py-2.5"
          value={selectedBeachId}
          onChange={(e) => setSelectedBeachId(e.target.value)}
          required
        >
          <option value="">Select a location</option>
          {availableBeaches.map((beach) => (
            <option key={beach.id} value={beach.id}>
              {beach.name}
            </option>
          ))}
        </select>
      </div>

      <div className="bg-blue-50 p-5 rounded-lg shadow-sm border border-blue-100">
        <h3 className="text-lg font-medium mb-3 text-gray-800">
          Rental Summary
        </h3>
        <div className="space-y-2 mb-4">
          <div className="flex justify-between py-1">
            <span className="text-gray-600">2-Week Package Rate:</span>
            <span className="font-medium">${70}</span>
          </div>
          <div className="flex justify-between py-1">
            <span className="text-gray-600">Number of Packages:</span>
            <span className="font-medium">
              {packageCount} ({numberOfWeeks} weeks)
            </span>
          </div>
        </div>
        <div className="flex justify-between font-bold mt-3 pt-3 border-t border-blue-200 text-lg">
          <span>Total Cost:</span>
          <span className="text-primary">${usdAmount.toFixed(2)}</span>
        </div>
      </div>

      <div className="flex justify-end pt-2">
        <button
          type="submit"
          disabled={loading || !startDate || !selectedBeachId}
          className="px-6 py-3 bg-primary hover:bg-primary/90 text-white font-medium rounded-lg shadow-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? "Submitting..." : "Request Rental"}
        </button>
      </div>
    </form>
  );
}
