"use client";

import React, {
  useState,
  useEffect,
  useCallback,
  useMemo,
  useRef,
} from "react";
import { QuestLogForm } from "./QuestLogForm";
import { useSession } from "next-auth/react";
import { useQuery } from "@tanstack/react-query";
import { QuestLogTable } from "./QuestLogTable";
import { QuestLogFilter } from "./QuestLogFilter";
import type {
  LogEntry,
  FilterConfig,
  RegionFilters,
} from "@/app/types/questlogs";
import type { Beach } from "@/app/types/beaches";

import { useSubscription } from "@/app/context/SubscriptionContext";
import { LogVisibilityToggle } from "@/app/components/LogVisibilityToggle";
import { useSearchParams, useRouter, usePathname } from "next/navigation";
import RippleLoader from "./ui/RippleLoader";
import dynamic from "next/dynamic";
import { Button } from "@/app/components/ui/Button";
import { RandomLoader } from "./ui/RandomLoader";
import { useQueryClient } from "@tanstack/react-query";
import { debounce } from "lodash";

interface QuestLogsProps {
  beaches: Beach[];
  userId: string;
  initialFilters: FilterConfig;
}

const defaultFilters: FilterConfig = {
  beachName: "",
  surferName: "",
  regions: [],
  beaches: [],
  countries: [],
  waveTypes: [],
  minRating: 0,
  dateRange: {
    start: "",
    end: "",
  },
  isPrivate: false,
  entries: [],
  surfers: [],
};

const defaultRegionFilters: RegionFilters = {
  continents: [],
  countries: [],
  regions: [],
  beaches: [],
  waveTypes: [],
};

const createFilterParams = (filters: FilterConfig) => {
  const params = new URLSearchParams();
  if (filters.regions?.length) params.set("regions", filters.regions.join(","));
  if (filters.beaches?.length) params.set("beaches", filters.beaches.join(","));
  if (filters.countries?.length)
    params.set("countries", filters.countries.join(","));
  if (filters.waveTypes?.length)
    params.set("waveTypes", filters.waveTypes.join(","));
  if (filters.minRating) params.set("minRating", filters.minRating.toString());
  if (filters.dateRange?.start)
    params.set("startDate", filters.dateRange.start);
  if (filters.dateRange?.end) params.set("endDate", filters.dateRange.end);
  return params;
};

const QuestLogFilter = dynamic(() => import("./QuestLogFilter"), {
  ssr: false,
  loading: () => (
    <div className="w-[360px] bg-white fixed right-0 top-0 h-full shadow-lg" />
  ),
});

export default function QuestLogs({
  beaches,
  userId,
  initialFilters,
}: QuestLogsProps) {
  const { data: session, status } = useSession();
  const { isSubscribed } = useSubscription();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<"logs" | "new">("logs");
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [filters, setFilters] = useState<FilterConfig>({
    ...defaultFilters,
    surfers: [],
  });
  const [regionFilters, setRegionFilters] =
    useState<RegionFilters>(defaultRegionFilters);
  const [selectedRegion, setSelectedRegion] = useState<string | null>(null);
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const queryClient = useQueryClient();

  // Replace URL param usage with local state
  const [isPrivate, setIsPrivate] = useState(
    initialFilters?.isPrivate || false
  );

  // Simplified toggle handler
  const handlePrivateToggle = () => {
    setIsPrivate((prev) => !prev);
  };

  const handleFilterChange = useCallback(
    (newFilters: FilterConfig) => {
      setFilters((prev) => ({
        ...prev,
        ...newFilters,
      }));
      const params = createFilterParams(newFilters);
      router.push(`?${params.toString()}`, { scroll: false });
    },
    [router]
  );

  const renderTabs = () => (
    <div className="mb-6 sm:mb-12">
      <div className="flex flex-col sm:flex-row items-center justify-start overflow-x-auto no-scrollbar border-b border-gray-200">
        <button
          onClick={() => setActiveTab("logs")}
          className={`px-4 py-3 sm:px-6 sm:py-4 text-small font-primary transition-colors duration-200 ${
            activeTab === "logs"
              ? "text-[var(--color-text-primary)]"
              : "text-[var(--color-text-secondary)] hover:text-[var(--color-text-primary)] hover:bg-gray-50"
          }`}
        >
          <span className="whitespace-nowrap">Logged Sessions</span>
        </button>
        <button
          onClick={() => {
            setActiveTab("new");
            setIsModalOpen(true);
          }}
          className={`px-4 py-3 sm:px-6 sm:py-4 text-small font-primary transition-colors duration-200 ${
            activeTab === "new"
              ? "text-[var(--color-text-primary)]"
              : "text-[var(--color-text-secondary)] hover:text-[var(--color-text-primary)] hover:bg-gray-50"
          }`}
        >
          <span className="whitespace-nowrap">Log A Session</span>
        </button>
      </div>
    </div>
  );

  // Prevent unnecessary re-renders
  const queryKey = useMemo(
    () => ["questLogs", session?.user?.id, filters],
    [session?.user?.id, filters]
  );

  // Update API query to use local state
  const { data: logEntriesData, isLoading } = useQuery({
    queryKey: ["questLogs", session?.user?.id, filters],
    queryFn: async () => {
      const params = createFilterParams(filters);
      const response = await fetch(
        `/api/quest-log/user/${session?.user.id}?${params.toString()}`
      );
      return response.json();
    },
    enabled: !!session?.user?.id,
    refetchOnWindowFocus: false,
    staleTime: 60_000,
  });

  const { data: conditions } = useQuery({
    queryKey: ["surfConditions", selectedRegion],
    queryFn: async () => {
      const response = await fetch(
        `/api/surf-conditions?region=${selectedRegion || ""}`
      );
      if (!response.ok) throw new Error("Failed to fetch conditions");
      const data = await response.json();
      return data.entries?.[0];
    },
    enabled: !!selectedRegion,
  });

  const isLoadingCombined = isLoading;

  const filteredEntries = useMemo(() => {
    return logEntriesData?.entries || [];
  }, [logEntriesData]);

  if (isLoadingCombined) {
    return <RandomLoader isLoading={true} />;
  }

  const handleRegionFilterChange = (newRegionFilters: RegionFilters) => {
    setRegionFilters(newRegionFilters);
    // Apply region filters...
  };

  const handleModalState = (isOpen: boolean, newTab?: "logs" | "new") => {
    setIsModalOpen(isOpen);
    if (newTab) setActiveTab(newTab);
  };

  return (
    <div className="min-h-screen bg-[var(--color-bg-secondary)] p-9 font-primary relative">
      <div className="max-w-[1600px] mx-auto relative z-10">
        {renderTabs()}

        {/* Main Content */}
        <div className="bg-white rounded-lg shadow-sm p-4 sm:p-9">
          <div className="flex flex-col sm:flex-row justify-between items-start mb-6 w-full">
            <div className="w-full border-b border-gray-200 pb-3 mb-6">
              <h2 className="text-lg sm:text-xl font-semibold font-primary">
                Logged Sessions
              </h2>
            </div>
            <div className="flex gap-4 items-center">
              <LogVisibilityToggle
                isPrivate={isPrivate}
                onChange={handlePrivateToggle}
              />
              <button
                onClick={() => setIsFilterOpen(true)}
                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
              >
                Filter
              </button>
            </div>
          </div>
          {filteredEntries.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500 mb-4">
                {isLoading
                  ? "Loading sessions..."
                  : "No matching sessions found"}
              </p>
              {!isLoading && (
                <Button onClick={() => setIsModalOpen(true)}>
                  Log Your First Session
                </Button>
              )}
            </div>
          ) : (
            <QuestLogTable
              entries={filteredEntries}
              showPrivateOnly={isPrivate}
              isSubscribed={isSubscribed}
            />
          )}
        </div>
      </div>

      {/* Right Sidebar Filter */}
      <QuestLogFilter
        beaches={beaches}
        selectedBeaches={filters.beaches}
        onFilterChange={handleFilterChange}
        isOpen={isFilterOpen}
        onClose={() => setIsFilterOpen(false)}
      />

      {/* Quest Log Form Modal */}
      {isModalOpen && (
        <QuestLogForm
          userEmail={session?.user?.email || ""}
          isOpen={isModalOpen}
          onClose={() => handleModalState(false)}
          beaches={beaches}
        />
      )}
    </div>
  );
}
