generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BeachGoodRating {
  id         String   @id @default(uuid())
  beachId    String
  region     String
  score      Int
  conditions Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  date       DateTime

  @@unique([beachId, date])
  @@index([date, region])
  @@index([beachId, date])
}

model AdRequest {
  id                    String         @id
  companyName           String
  contactEmail          String
  imageUrl              String?
  linkUrl               String
  description           String?
  status                String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  rejectionReason       String?
  userId                String?
  category              String
  categoryData          Json?
  googleAdsCampaignId   String?
  googleAdsContribution Float
  regionId              String
  title                 String?
  yearlyPrice           Float
  startDate             DateTime
  endDate               DateTime
  variantId             String?
  paypalSubscriptionId  String?
  ad                    Ad?
  region                Region         @relation(fields: [regionId], references: [id])
  user                  User?          @relation(fields: [userId], references: [id])
  notifications         Notification[]
  categoryType          String?        @default("local")
  customCategory        String?

  @@index([regionId])
  @@index([category])
  @@index([status])
}

model Ad {
  id                   String              @id @default(uuid())
  requestId            String              @unique
  companyName          String
  title                String?
  description          String?
  category             String
  linkUrl              String
  imageUrl             String?
  regionId             String
  country              String?
  status               String              @default("active")
  startDate            DateTime
  endDate              DateTime
  paypalSubscriptionId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  userId               String?
  region               Region              @relation(fields: [regionId], references: [id])
  adRequest            AdRequest           @relation(fields: [requestId], references: [id])
  user                 User?               @relation(fields: [userId], references: [id])
  beachConnections     AdBeachConnection[]
  clicks               AdClick[]
  notifications        Notification[]
  categoryType         String?             @default("local")
  customCategory       String?

  @@index([regionId])
  @@index([category])
  @@index([status])
  @@index([userId])
}

model AdBeachConnection {
  id      String @id @default(uuid())
  adId    String
  beachId String
  ad      Ad     @relation(fields: [adId], references: [id], onDelete: Cascade)
  beach   Beach  @relation(fields: [beachId], references: [id])

  @@unique([adId, beachId])
  @@index([adId])
  @@index([beachId])
}

model User {
  id                   String              @id @default(cuid())
  name                 String
  email                String              @unique
  emailVerified        DateTime?
  image                String?
  nationality          String?
  password             String?
  skillLevel           SkillLevel?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  lemonCustomerId      String?
  lemonSubscriptionId  String?
  savedFilters         Json?
  hasActiveTrial       Boolean             @default(false)
  hasTrialEnded        Boolean             @default(false)
  trialEndDate         DateTime?
  trialStartDate       DateTime?
  bio                  String?
  link                 String?
  subscriptionEndsAt   DateTime?
  subscriptionStatus   String?
  paypalSubscriptionId String?
  roles                UserRole[]          @default([SURFER])
  accounts             Account[]
  ads                  Ad[]
  adRequests           AdRequest[]
  alerts               Alert[]
  boards               Board[]
  comments             Comment[]
  events               Event[]
  logEntries           LogEntry[]
  membership           Membership?
  notifications        Notification[]
  rentalChatMessages   RentalChatMessage[]
  rentalItems          RentalItem[]
  ownedItemRequests    RentalItemRequest[] @relation("OwnerItemRequests")
  rentedItemRequests   RentalItemRequest[] @relation("RenterItemRequests")
  safariBookings       SafariBooking[]
  sessions             Session[]
  stories              Story[]
  surfSafaris          SurfSafariListing[]
  favorites            UserFavorite[]
  filters              UserFilters?

  @@index([email])
  @@index([skillLevel])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  country     String
  regionId    String
  startTime   DateTime
  link        String?
  createdAt   DateTime @default(now())
  userId      String
  region      Region   @relation(fields: [regionId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([regionId])
}

model LogEntry {
  id           String     @id @default(uuid())
  date         DateTime   @db.Date
  surferName   String?
  surferEmail  String?
  beachName    String?
  surferRating Int        @default(0)
  comments     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  imageUrl     String?
  isPrivate    Boolean    @default(false)
  isAnonymous  Boolean    @default(false)
  continent    String?
  country      String?
  region       String?
  waveType     String?
  beachId      String?
  userId       String?    @map("user_id")
  forecastId   String?
  alerts       Alert[]
  beach        Beach?     @relation(fields: [beachId], references: [id])
  forecast     ForecastA? @relation(fields: [forecastId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])

  @@index([isPrivate])
  @@index([userId])
  @@index([date])
  @@index([beachId])
  @@index([surferRating])
  @@index([forecastId])
}

model SafariBooking {
  id             String            @id @default(cuid())
  safariId       String
  userId         String
  date           DateTime
  bringingBoard  Boolean           @default(false)
  requiresRental Boolean           @default(false)
  skillLevel     SkillLevel
  status         BookingStatus     @default(PENDING)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  boardId        String?
  board          Board?            @relation(fields: [boardId], references: [id])
  safari         SurfSafariListing @relation(fields: [safariId], references: [id])
  user           User              @relation(fields: [userId], references: [id])

  @@index([safariId])
  @@index([userId])
  @@index([date])
  @@index([status])
  @@index([boardId])
}

model SurfSafariListing {
  id                     String                  @id @default(cuid())
  guideId                String
  title                  String
  description            String
  profileImage           String?
  price                  Float?
  isFree                 Boolean                 @default(false)
  hasVehicleTransport    Boolean                 @default(false)
  canTransportLongboard  Boolean                 @default(false)
  canTransportShortboard Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  beaches                BeachSafariConnection[]
  bookings               SafariBooking[]
  guide                  User                    @relation(fields: [guideId], references: [id], onDelete: Cascade)

  @@index([guideId])
  @@index([isActive])
}

model BeachSafariConnection {
  id       String            @id @default(cuid())
  beachId  String
  safariId String
  distance Float?
  safari   SurfSafariListing @relation(fields: [safariId], references: [id])

  @@unique([beachId, safariId])
  @@index([safariId])
  @@index([beachId])
}

model Beach {
  id                     String                  @id
  name                   String
  continent              String
  country                String
  regionId               String
  location               String
  distanceFromCT         Float
  optimalWindDirections  String[]
  optimalSwellDirections Json
  bestSeasons            String[]
  optimalTide            String
  description            String
  difficulty             String
  waveType               String
  swellSize              Json
  idealSwellPeriod       Json
  waterTemp              Json
  hazards                String[]
  crimeLevel             String
  sharkAttack            Json
  image                  String?
  coordinates            Json
  videos                 Json?
  profileImage           String?
  advertisingPrice       Float?
  coffeeShop             Json?
  hasSharkAlert          Boolean?
  bestMonthOfYear        String?
  isHiddenGem            Boolean?
  sheltered              Boolean?
  adConnections          AdBeachConnection[]
  region                 Region                  @relation(fields: [regionId], references: [id])
  rentalItems            BeachRentalConnection[]
  feedbacks              Feedback[]
  logEntries             LogEntry[]
  rentalItemRequests     RentalItemRequest[]
  stories                Story[]

  @@index([regionId])
  @@index([country])
  @@index([waveType])
  @@index([difficulty])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Membership {
  id             String   @id @default(cuid())
  userId         String   @unique
  lemonSqueezyId String?
  variantId      Int?
  checkoutUrl    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Board {
  id             String          @id @default(cuid())
  userId         String
  name           String
  type           BoardType
  length         Float
  finSetup       FinType
  images         String[]
  thumbnail      String?
  user           User            @relation(fields: [userId], references: [id])
  safariBookings SafariBooking[]

  @@index([userId])
}

model ForecastA {
  id             String     @id @default(uuid())
  date           DateTime   @db.Date
  region         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  windSpeed      Int        @default(0)
  windDirection  Float      @default(0)
  swellHeight    Float      @default(0)
  swellPeriod    Int        @default(0)
  swellDirection Float      @default(0)
  alerts         Alert[]
  logEntries     LogEntry[]

  @@unique([date, region])
}

model ForecastB {
  id        String   @id @default(uuid())
  date      DateTime
  region    String
  forecast  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, region])
}

model Feedback {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  date         DateTime
  beachId      String
  conditions   Json
  improvements String?
  beach        Beach    @relation(fields: [beachId], references: [id])
}

model Story {
  id          String   @id @default(cuid())
  title       String
  details     String
  date        DateTime
  category    String
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  beachName   String?
  beachId     String?
  regionId    String?
  customBeach String?
  author      User     @relation(fields: [authorId], references: [id])
  beach       Beach?   @relation(fields: [beachId], references: [id])
  region      Region?  @relation(fields: [regionId], references: [id])

  @@index([authorId])
  @@index([beachId])
  @@index([regionId])
}

model UserFilters {
  id        String   @id @default(cuid())
  userEmail String   @unique
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  title     String   @db.VarChar(255)
  videoLink String   @db.VarChar(2048)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model RentalItem {
  id               String                   @id @default(cuid())
  name             String
  description      String?
  thumbnail        String?
  images           String[]
  isActive         Boolean                  @default(true)
  rentPrice        Float
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  userId           String
  itemType         String
  specifications   Json
  availableBeaches BeachRentalConnection[]
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability     RentalItemAvailability[]
  rentalRequests   RentalItemRequest[]

  @@index([userId])
  @@index([itemType])
  @@index([isActive])
}

model BeachRentalConnection {
  id           String     @id @default(cuid())
  rentalItemId String
  beachId      String
  beach        Beach      @relation(fields: [beachId], references: [id])
  rentalItem   RentalItem @relation(fields: [rentalItemId], references: [id], onDelete: Cascade)

  @@unique([rentalItemId, beachId])
  @@index([rentalItemId])
  @@index([beachId])
}

model RentalItemRequest {
  id                 String              @id @default(cuid())
  rentalItemId       String
  renterId           String
  ownerId            String
  status             RequestStatus       @default(PENDING)
  startDate          DateTime
  endDate            DateTime
  beachId            String
  totalCost          Json
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastActionAt       DateTime            @default(now())
  expiresAt          DateTime
  modificationCount  Int                 @default(0)
  previousVersions   Json?
  cancellationReason String?
  isExpired          Boolean             @default(false)
  hasBeenViewed      Boolean             @default(false)
  viewedAt           DateTime?
  paymentIntentId    String?
  depositPaid        Boolean             @default(false)
  messages           RentalChatMessage[]
  beach              Beach               @relation(fields: [beachId], references: [id])
  owner              User                @relation("OwnerItemRequests", fields: [ownerId], references: [id])
  rentalItem         RentalItem          @relation(fields: [rentalItemId], references: [id])
  renter             User                @relation("RenterItemRequests", fields: [renterId], references: [id])

  @@index([rentalItemId])
  @@index([renterId])
  @@index([ownerId])
  @@index([beachId])
  @@index([status])
}

model RentalItemAvailability {
  id           String     @id @default(cuid())
  rentalItemId String
  startDate    DateTime
  endDate      DateTime
  rentalItem   RentalItem @relation(fields: [rentalItemId], references: [id], onDelete: Cascade)

  @@index([rentalItemId])
}

model RentalChatMessage {
  id        String            @id @default(cuid())
  requestId String
  senderId  String
  content   String
  createdAt DateTime          @default(now())
  request   RentalItemRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  sender    User              @relation(fields: [senderId], references: [id])

  @@index([requestId])
  @@index([senderId])
}

model Region {
  id         String      @id
  name       String
  country    String
  continent  String?
  ads        Ad[]
  adRequests AdRequest[]
  beaches    Beach[]
  events     Event[]
  stories    Story[]
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  entityId   String
  entityType String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityId, entityType])
}

model AdClick {
  id        String   @id @default(cuid())
  adId      String
  createdAt DateTime @default(now())
  ad        Ad       @relation(fields: [adId], references: [id])
}

model Alert {
  id                 String              @id @default(uuid())
  name               String
  region             String
  properties         Json
  notificationMethod String
  contactInfo        String
  active             Boolean             @default(true)
  userId             String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  logEntryId         String?
  alertType          String              @default("variables")
  starRating         String?
  forecastDate       DateTime            @db.Date
  forecastId         String?
  forecast           ForecastA?          @relation(fields: [forecastId], references: [id])
  logEntry           LogEntry?           @relation(fields: [logEntryId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  checks             AlertCheck[]
  notifications      AlertNotification[]
}

model AlertCheck {
  id        String   @id @default(uuid())
  alertId   String
  checkedAt DateTime @default(now())
  success   Boolean
  details   String?
  alert     Alert    @relation(fields: [alertId], references: [id])

  @@index([alertId])
  @@index([checkedAt])
}

model AlertNotification {
  id            String         @id @default(uuid())
  alertId       String
  success       Boolean
  details       String?
  createdAt     DateTime       @default(now())
  alertName     String?
  beachId       String?
  beachName     String?
  region        String?
  alert         Alert          @relation(fields: [alertId], references: [id])
  notifications Notification[]

  @@index([alertId])
  @@index([createdAt])
  @@index([region])
  @@index([beachId])
}

model Notification {
  id                  String             @id @default(uuid())
  userId              String
  type                String
  title               String
  message             String
  read                Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  alertNotificationId String?
  adId                String?
  adRequestId         String?
  ad                  Ad?                @relation(fields: [adId], references: [id])
  adRequest           AdRequest?         @relation(fields: [adRequestId], references: [id])
  alertNotification   AlertNotification? @relation(fields: [alertNotificationId], references: [id])
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
  @@index([alertNotificationId])
  @@index([adId])
  @@index([adRequestId])
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PRO
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SleepingType {
  COUCH
  PRIVATE_ROOM
  SHARED_ROOM
  AIR_MATTRESS
  MATTRESS
  BUNK
}

enum BoardType {
  SHORTBOARD
  LONGBOARD
  FISH
  FUNBOARD
  SUP
  GUN
  MINI_MAL
}

enum FinType {
  THRUSTER
  TWIN
  QUAD
  SINGLE
  FIVE
  OTHER
}

enum UserRole {
  SURFER
  SHAPER
  SURF_CAMP_MANAGER
  PHOTOGRAPHER
  VIDEOGRAPHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}
